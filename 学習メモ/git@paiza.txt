【Git @ paiza】
＊コマンドプロンプトコマンド
	cd : ディレクトリ移動
	dir : ディレクトリ一覧
	tree : dirをツリー表示
	type : ファイル内容表示
		>>type ファイル名 ファイル名で新規ファイル作成
	ren : ファイル名変更 ren 対象ファイル 新ファイル名
	move : ファイルを移動する時に利用します。「move 移動するファイル名 移動先パス」
		ディレクトリ名を変更する時に利用します。「move 変更前ディレクトリ名 変更後ディレクトリ名」
	copy : copy コピー元 コピー先でコピー
	del : ファイル及びフォルダ削除
	help : help コマンド名
	cls : クリア
			
*****リポジトリを作る*****
	pwd : 現在のフォルダ
	gitインストール後 > git : ヘルプが出る
	git --version : バージョン表示
	git config --global user.name(user.email) "name" : ユーザ登録
	git config --list : 登録情報確認
	以下リポジトリ作成
	mkdir xxxx : git用フォルダ作成 > cd xxxx
	git init : .gitファイルができる&git用フォルダになる 
	グローバルorローカルユーザー設定をする
		$ git config --global user.name "taro.kirameki"
		$ git config --global user.email "taro.kirameki@techacademy.jp"
		ローカルの場合（リポジトリごとにユーザを変えたい時）
		$ git config --local user.name "jiro.kirameki"

	
*****リポジトリにファイルを追加*****
	xxx.txtをつくる
	ワーキングエリア > ステージングエリア(index) > リポジトリ
	git status : ファイルの状態確認 & xxx.txtが赤字で表示(untracked)
	git add xxx.txt : xxx.txtをindexに仮登録 & "newfile: xxx.txt"と緑で表示される
	git commit : vimが立ち上がる(:qで離脱) > Aキーで入力モード & 1st commit!などコミットメッセージ入力 > escで入力モード抜ける > :wq で戻る
	git status : 修正の登録(commit)状況を確認
	git log : commitの確認

*****複数ファイルをまとめてコミット*****
	xxx.txtを修正 > git status : "modified: xxx.txt"と修正ファイルが赤字で表示される
	yyy.txtをつくる
	git status > xxx.txt(modefied) yyy.txt(untracked)があるのでステージングする(add)
	git add . : 複数ファイルまとめてステージングする時 "."使う
	(git commit -a -n "2nd commit" : まとめてcommitするオプション)
	普通にgit add . > git commit ってやればいい
	
*****作業履歴の確認*****
	git log : commitなどの履歴確認
	git log --oneline : 省略表示
	git log -1 : 直近1件表示
	git stats -s : シンプル表示
	
	【ファイル状態の比較】
	git diff : ワーキングdir <> インデックス
	git diff --cached : インデックス <> リポジトリ(最新のcommit)
	git diff HEAD : リポジトリ(最新のcommit) <> ワーキングdir
	
*****作業履歴の取り消し*****
	git reset xxx.txt : インデックスのxxx.txtの状態をリポジトリの最新commitに戻す
	git checkout xxx.txt : ワーキングdirのxxx.txtの状態をリポジトリの最新commitのxxx.txtの状態に戻す
	git revert HEAD : 最新のcommitを消去し消去したことをlogに残す
	
*****ブランチでの作業*****
	リポジトリで公開しているメインファイル(masterブランチ)を修正,改良するためにコピーを作ってワーキングdirで作業(元ファイルをいじらず安全に独立した作業できる)し完成後元ファイルとマージ(統合)する
	リポジトリにmasterという元ファイルブランチがある > 任意の名前(fixとする)でブランチ(コピー)を作成 > checkoutでワーキングdirでfixブランチの作業を進める > commit後マージ
	
	git branch : ブランチの状態を表示,現在のブランチに*がつく
	git branch xxxx : 新規ブランチ作成
	git checkout xxxx : 指定ブランチへの移動
	
	【ブランチにコミット】
	git branchで現在のブランチ確認(xxxx) > 例)index.html作成 > git add . > git commit -m "htmlつくりました" : で新規ファイルをxxxxブランチにコミット
	
	【マスターブランチへの統合(マージ)】
	git branch master > マスターへ移動
	git merge xxxx(統合するブランチ) : マスターへサブブランチを統合
	git branch -d xxxx : マージで不要になったブランチを消去
	
	【マージするときの衝突(conflict)の回避】
	git status > Unmerged pathsが問題箇所 > 衝突箇所のあるfileを開くと<<<<<< HEAD ===== >>>>>>の中に問題箇所があるので修正
	修正後 git add index.html(例) してコミットする > git commit : すでに修正情報やらが記述してあるので:wqで抜ける 

*****プロジェクトのクローン(他のプロジェクトにgitで参加する際などに利用)*****
	共有リポジトリ : /tmp/project.gitとする
	まずクローンを格納し作業するdirをつくる: mkdir work
	cd work > git clone /tmp/project.git(共有のパス) : クローンができる
	git statusなどで確認 > git remote -vで共有元のファイルパスの確認: originは共有元のpath
	
	対象ファイルを修正しコミット > git commit -a -m "メッセージ"
	git push origin master : 共有リポジトリ(元リポジトリ)に変更(さっきのコミット)を反映

*****共有リポジトリの変更を取り込む*****
	↑のworkに移動(作業用クローン)
	git pull /tmp/project.git/ : 共有リポジトリから修正を取り込む
	git log で確認
	【再度修正した場合】
	修正後修正ファイルをコミット
	git push origin master : 共有リポジトリに修正を反映